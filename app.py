"""Created on Thu Jun  1 07:00:53 2023@author: abhishek"""##########import all necessary librariesimport streamlit as stimport plotly.express as pximport pandas as pdimport numpy as npst.title("EDA APP")st.markdown("""This app performs EDA*   **Python Libraries :** Streamlit,Pandas,Plotly ....            """)###########upload the filefile_byte=st.file_uploader("Upload a file",type="csv")#########check if file has been uploaded or notif file_byte is not None:    #reading the file    df=pd.read_csv(file_byte)    st.dataframe(df)    obj=[] #empty list for objects datatype    int_float=[]    for i in df.columns:        clas=df[i].dtypes        if clas =='object':            obj.append(i)        else:            int_float.append(i)             ########## Adding submit Button sidebarwith st.form(key='my_form'):    with st.sidebar:        st.sidebar.header("To remove NULL values press the button below")        submit_button=st.form_submit_button(label='Remove NULL')        ############# if we click remove NULL Nulll values will be replaced with mean or mode if submit_button:    for i in df.columns:        clas=df[i].dtypes        if clas =='object':            df[i].fillna(df[i].mode()[0],inplace=True)        else:            df[i].fillna(df[i].mean(),inplace=True)            ######### finding count of null value in each columnlis=[]   for i in df.columns:    n=sum(df[i].isnull())    lis.append(n)    ##########   if no. of null values are 0 it will display some text otherwise it will display barplot by each columnif max(lis)==0:    st.write("Total no. of NULL Value "+str(max(lis)))else:    st.write("Bar Plot to know no. of NULL values in each column")    st.write("Total no. of NULL values"+str(sum(lis)))    fig2=px.bar(x=df.columns,y=lis,labels={'x':"Columns Names",'y':"No. of Null Values"})    st.plotly_chart(fig2)        ####### Frequency Plotst.sidebar.header("Select Variable")selected_pos=st.sidebar.selectbox('Object Variable',obj)st.write("Bar Plot to know frequency of each category")frequency_data=df[selected_pos].value_counts()fig=px.bar(frequency_data,x=frequency_data.index,y=selected_pos,labels={'x':selected_pos,'y':'count'})st.plotly_chart(fig)                                                    